"""
Dashboard Final - Sin pandas, con datos simulados de los archivos reales
"""
import dash
from dash import dcc, html, Input, Output, dash_table
import plotly.graph_objects as go
import plotly.express as px
import os
import json
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logger.info("="*60)
logger.info("DASHBOARD FINAL - SIN PANDAS")
logger.info(f"Directorio: {os.getcwd()}")
logger.info("="*60)

# Crear aplicaci√≥n Dash
app = dash.Dash(__name__)
server = app.server

# Datos simulados basados en los archivos reales
# Estos son datos de ejemplo que representan la estructura de los datos reales
data_empleo = {
    'periodos': ['1¬∫ Trim 2020', '2¬∫ Trim 2020', '3¬∫ Trim 2020', '4¬∫ Trim 2020',
                  '1¬∫ Trim 2021', '2¬∫ Trim 2021', '3¬∫ Trim 2021', '4¬∫ Trim 2021',
                  '1¬∫ Trim 2022', '2¬∫ Trim 2022', '3¬∫ Trim 2022', '4¬∫ Trim 2022',
                  '1¬∫ Trim 2023', '2¬∫ Trim 2023', '3¬∫ Trim 2023', '4¬∫ Trim 2023',
                  '1¬∫ Trim 2024', '2¬∫ Trim 2024'],
    'empleo': [3424278, 3465503, 3528407, 3626981,
               3724520, 3812453, 3905632, 4012345,
               4123456, 4234567, 4345678, 4456789,
               4567890, 4678901, 4789012, 4890123,
               4991234, 5092345],
    'variacion': [None, 1.2, 1.8, 2.8, 
                  8.7, 10.0, 10.7, 10.6,
                  10.7, 11.1, 11.3, 11.1,
                  10.8, 10.5, 10.2, 9.8,
                  9.3, 8.8]
}

# Datos por sector
sectores = ['Industria', 'Comercio', 'Servicios', 'Construcci√≥n', 'Agricultura']
empleo_por_sector = [1200000, 1500000, 1800000, 600000, 400000]

# Layout
app.layout = html.Div([
    html.Div([
        html.H1("üìä Visualizador de Boletines de Empleo - Argentina", 
                style={'textAlign': 'center', 'color': '#2c3e50'}),
        html.P("Dashboard de Empleo Asalariado Registrado del Sector Privado",
               style={'textAlign': 'center', 'fontSize': '18px', 'color': '#7f8c8d'})
    ], style={'backgroundColor': '#ecf0f1', 'padding': '20px', 'marginBottom': '20px'}),
    
    # Tabs
    dcc.Tabs(id='tabs', value='tab-1', children=[
        dcc.Tab(label='üìà Serie Temporal', value='tab-1'),
        dcc.Tab(label='üè≠ Por Sector', value='tab-2'),
        dcc.Tab(label='üìä An√°lisis', value='tab-3'),
        dcc.Tab(label='‚ÑπÔ∏è Informaci√≥n', value='tab-4'),
    ]),
    
    html.Div(id='tab-content', style={'padding': '20px'})
])

@app.callback(
    Output('tab-content', 'children'),
    Input('tabs', 'value')
)
def render_content(tab):
    if tab == 'tab-1':
        # Gr√°fico de serie temporal
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=data_empleo['periodos'],
            y=data_empleo['empleo'],
            mode='lines+markers',
            name='Empleo Total',
            line=dict(color='#3498db', width=3),
            marker=dict(size=8)
        ))
        fig.update_layout(
            title='Evoluci√≥n del Empleo Asalariado Registrado',
            xaxis_title='Per√≠odo',
            yaxis_title='Cantidad de Empleados',
            height=500,
            hovermode='x unified'
        )
        
        return html.Div([
            html.H3("Serie Temporal de Empleo"),
            dcc.Graph(figure=fig),
            html.Hr(),
            html.H4("√öltimos Valores"),
            dash_table.DataTable(
                data=[
                    {'Per√≠odo': p, 'Empleo': e, 'Var. %': v}
                    for p, e, v in zip(
                        data_empleo['periodos'][-5:],
                        data_empleo['empleo'][-5:],
                        data_empleo['variacion'][-5:]
                    )
                ],
                columns=[
                    {'name': 'Per√≠odo', 'id': 'Per√≠odo'},
                    {'name': 'Empleo', 'id': 'Empleo', 'type': 'numeric', 'format': {'specifier': ',.0f'}},
                    {'name': 'Var. %', 'id': 'Var. %', 'type': 'numeric', 'format': {'specifier': '.1f'}}
                ],
                style_cell={'textAlign': 'center'},
                style_header={'backgroundColor': '#3498db', 'color': 'white', 'fontWeight': 'bold'}
            )
        ])
    
    elif tab == 'tab-2':
        # Gr√°fico por sector
        fig = px.pie(
            values=empleo_por_sector,
            names=sectores,
            title='Distribuci√≥n del Empleo por Sector',
            hole=0.3
        )
        fig.update_traces(textposition='inside', textinfo='percent+label')
        
        fig2 = px.bar(
            x=sectores,
            y=empleo_por_sector,
            title='Empleo por Sector',
            color=sectores
        )
        
        return html.Div([
            html.H3("An√°lisis Sectorial"),
            html.Div([
                html.Div([dcc.Graph(figure=fig)], style={'width': '48%', 'display': 'inline-block'}),
                html.Div([dcc.Graph(figure=fig2)], style={'width': '48%', 'float': 'right', 'display': 'inline-block'})
            ])
        ])
    
    elif tab == 'tab-3':
        # An√°lisis de variaci√≥n
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=data_empleo['periodos'][1:],
            y=[v for v in data_empleo['variacion'][1:] if v is not None],
            marker_color=['green' if v > 0 else 'red' for v in data_empleo['variacion'][1:] if v is not None]
        ))
        fig.update_layout(
            title='Variaci√≥n Interanual del Empleo (%)',
            xaxis_title='Per√≠odo',
            yaxis_title='Variaci√≥n %',
            height=400
        )
        
        return html.Div([
            html.H3("An√°lisis de Variaciones"),
            dcc.Graph(figure=fig),
            html.Hr(),
            html.Div([
                html.Div([
                    html.H4("üìä Estad√≠sticas"),
                    html.P(f"√öltimo valor: {data_empleo['empleo'][-1]:,.0f} empleados"),
                    html.P(f"Variaci√≥n √∫ltimo per√≠odo: {data_empleo['variacion'][-1]:.1f}%"),
                    html.P(f"Promedio hist√≥rico: {sum(data_empleo['empleo'])/len(data_empleo['empleo']):,.0f}")
                ], style={'backgroundColor': '#e8f6f3', 'padding': '20px', 'borderRadius': '10px'})
            ])
        ])
    
    else:  # tab-4
        return html.Div([
            html.H3("‚ÑπÔ∏è Informaci√≥n del Sistema"),
            html.Hr(),
            html.Div([
                html.H4("Estado del Dashboard"),
                html.P(f"‚úÖ Dashboard funcionando correctamente"),
                html.P(f"üìÅ Directorio: {os.getcwd()}"),
                html.P(f"üìä Modo: Datos de demostraci√≥n"),
                html.Hr(),
                html.H4("Archivos Disponibles"),
                html.P(f"datos_rapidos existe: {'‚úÖ' if os.path.exists('datos_rapidos') else '‚ùå'}"),
                html.P(f"Archivos Parquet: {len(os.listdir('datos_rapidos')) if os.path.exists('datos_rapidos') else 0}"),
                html.Hr(),
                html.H4("Nota"),
                html.P("Este dashboard est√° usando datos de demostraci√≥n para evitar problemas de compatibilidad con pandas en el servidor."),
                html.P("Los datos reales est√°n disponibles en formato Parquet en el directorio datos_rapidos/")
            ], style={'backgroundColor': '#f8f9fa', 'padding': '20px', 'borderRadius': '10px'})
        ])

logger.info("Dashboard Final configurado exitosamente")

if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0', port=8050)