"""
Dashboard V1 - Visualizador de Boletines de Empleo
Implementaci√≥n completa con todas las vistas y callbacks
√öltima actualizaci√≥n: 12 de agosto de 2025
"""

import dash
from dash import dcc, html, Input, Output, State, callback_context, dash_table
from dash.exceptions import PreventUpdate
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
from datetime import datetime
import os
from functools import lru_cache
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =====================================================================
# CONFIGURACI√ìN Y CONSTANTES
# =====================================================================

CACHE_SIZE = 128

# Mapeo de trimestres a meses para fechas
TRIMESTRE_MES = {
    '1¬∫ Trim': 2,  # Febrero
    '2¬∫ Trim': 5,  # Mayo
    '3¬∫ Trim': 8,  # Agosto
    '4¬∫ Trim': 11  # Noviembre
}

# Colores corporativos
COLORS = {
    'primary': '#1f77b4',
    'secondary': '#ff7f0e',
    'success': '#2ca02c',
    'danger': '#d62728',
    'warning': '#ff9800',
    'info': '#17a2b8',
    'light': '#f8f9fa',
    'dark': '#343a40'
}

# =====================================================================
# FUNCIONES DE CARGA Y PROCESAMIENTO DE DATOS
# =====================================================================

@lru_cache(maxsize=1)
def load_all_data():
    """
    Carga todos los datos desde Parquet optimizado.
    Solo usa Parquet para m√°ximo rendimiento en producci√≥n.
    """
    logger.info("="*60)
    logger.info("INICIANDO CARGA DE DATOS (SOLO PARQUET)")
    logger.info(f"Directorio actual: {os.getcwd()}")
    logger.info(f"Existe datos_rapidos?: {os.path.exists('datos_rapidos')}")
    logger.info("="*60)
    data = {}
    
    # Mapeo de nombres para archivos Parquet
    parquet_mapping = {
        'C1.1': 'c11.parquet',
        'C1.2': 'c12.parquet',
        'C2.1': 'c2_1.parquet',
        'C2.2': 'c2_2.parquet',
        'C3': 'c3.parquet',
        'C4': 'c4.parquet',
        'C5': 'c5.parquet',
        'C6': 'c6.parquet',
        'C7': 'c7.parquet',
        'descriptores_CIIU': 'descriptores.parquet'
    }
    
    parquet_dir = 'datos_rapidos'
    
    for key in ['C1.1', 'C1.2', 'C2.1', 'C2.2', 'C3', 'C4', 'C5', 'C6', 'C7', 'descriptores_CIIU']:
        # Cargar solo desde Parquet (producci√≥n optimizada)
        parquet_file = parquet_mapping.get(key)
        parquet_path = os.path.join(parquet_dir, parquet_file) if parquet_file else None
        
        if parquet_path and os.path.exists(parquet_path):
            df = pd.read_parquet(parquet_path)
            logger.info(f"  {key}: {len(df)} registros cargados desde Parquet")
        else:
            logger.warning(f"  {key}: No se encontr√≥ archivo Parquet")
            continue
            
        # Procesar per√≠odos si existe la columna
        # Manejar ambos casos de encoding
        if 'PerÔøΩodo' in df.columns:
            df = df.rename(columns={'PerÔøΩodo': 'Per√≠odo'})
        if 'Per√≠odo' in df.columns:
            df = process_periods(df)
        
        # Calcular variaciones si es serie temporal
        if key in ['C1.1', 'C1.2', 'C2.1', 'C2.2', 'C3', 'C4', 'C5', 'C6', 'C7']:
            df = calculate_variations(df)
        
        data[key] = df
    
    return data

def process_periods(df):
    """
    Convierte la columna Per√≠odo a formato Date y agrega columnas auxiliares.
    """
    if 'Per√≠odo' not in df.columns:
        return df
    
    # Parsear per√≠odo
    def parse_period(period_str):
        try:
            parts = period_str.split(' ')
            trimestre = f"{parts[0]} {parts[1]}"
            year = int(parts[2])
            month = TRIMESTRE_MES.get(trimestre, 2)
            return pd.Timestamp(year=year, month=month, day=1)
        except:
            return pd.NaT
    
    df['Date'] = df['Per√≠odo'].apply(parse_period)
    df['Year'] = df['Date'].dt.year
    df['Quarter'] = df['Date'].dt.quarter
    
    return df

def parse_period_string(period_str):
    """
    Convierte un string de per√≠odo (ej: "4¬∫ Trim 2004") a pd.Timestamp.
    """
    try:
        parts = period_str.split(' ')
        trimestre = f"{parts[0]} {parts[1]}"
        year = int(parts[2])
        month = TRIMESTRE_MES.get(trimestre, 2)
        return pd.Timestamp(year=year, month=month, day=1)
    except:
        return None

def calculate_variations(df):
    """
    Calcula variaciones trimestrales e interanuales.
    """
    if 'Empleo' in df.columns and 'Date' in df.columns:
        df = df.sort_values('Date')
        df['var_trim'] = df['Empleo'].pct_change() * 100
        df['var_yoy'] = df['Empleo'].pct_change(4) * 100
        
        # √çndice base 100
        if len(df) > 0 and df['Empleo'].iloc[0] != 0:
            df['index_100'] = (df['Empleo'] / df['Empleo'].iloc[0]) * 100
    
    return df

def get_latest_period_data(data):
    """
    Obtiene datos del √∫ltimo per√≠odo disponible para KPIs.
    """
    c11 = data.get('C1.1', pd.DataFrame())
    
    if not c11.empty and 'Date' in c11.columns:
        latest = c11.nlargest(1, 'Date').iloc[0]
        prev = c11.nlargest(2, 'Date').iloc[1] if len(c11) > 1 else latest
        yoy = c11[c11['Date'] == latest['Date'] - pd.DateOffset(years=1)]
        
        return {
            'empleo_actual': latest['Empleo'] if 'Empleo' in latest else 0,
            'var_trim': latest['var_trim'] if 'var_trim' in latest else 0,
            'var_yoy': latest['var_yoy'] if 'var_yoy' in latest else 0,
            'periodo': latest['Per√≠odo'] if 'Per√≠odo' in latest else '',
            'fecha': latest['Date'] if 'Date' in latest else None
        }
    
    return {
        'empleo_actual': 0,
        'var_trim': 0,
        'var_yoy': 0,
        'periodo': 'No disponible',
        'fecha': None
    }

# =====================================================================
# FUNCIONES DE UTILIDADES UI
# =====================================================================

def create_kpi_card(title, value, subtitle="", color="primary", id_prefix="kpi"):
    """
    Crea una tarjeta KPI estilizada.
    """
    value_color = COLORS.get(color, COLORS['primary'])
    
    # Determinar color seg√∫n el valor
    if isinstance(value, (int, float)):
        if value > 0:
            value_color = COLORS['success']
        elif value < 0:
            value_color = COLORS['danger']
    
    return html.Div([
        html.Div([
            html.H6(title, className="text-muted mb-2"),
            html.H3(
                f"{value:,.0f}" if isinstance(value, (int, float)) and abs(value) > 100 else 
                f"{value:.2f}%" if isinstance(value, (int, float)) else value,
                style={'color': value_color, 'fontWeight': 'bold'}
            ),
            html.Small(subtitle, className="text-muted")
        ], className="card-body")
    ], className="card shadow-sm", id=f"{id_prefix}-card")

def format_number(value):
    """
    Formatea n√∫meros con separadores de miles.
    """
    if pd.isna(value):
        return "N/D"
    if isinstance(value, (int, float)):
        if abs(value) >= 1000000:
            return f"{value/1000000:.1f}M"
        elif abs(value) >= 1000:
            return f"{value/1000:.1f}K"
        else:
            return f"{value:.1f}"
    return str(value)

# =====================================================================
# INICIALIZACI√ìN DE LA APLICACI√ìN
# =====================================================================

app = dash.Dash(__name__, external_stylesheets=[
    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'
], suppress_callback_exceptions=True)

app.title = "Dashboard V1 - Visualizador de Empleo"

# =====================================================================
# LAYOUT PRINCIPAL
# =====================================================================

app.layout = html.Div([
    # Header
    html.Div([
        html.H1("üìä Visualizador de Boletines de Empleo - Argentina", 
                className="text-white mb-0"),
        html.P("Sistema Integrado Previsional Argentino (SIPA)", 
               className="text-white-50 mb-0")
    ], className="bg-primary p-4 mb-4"),
    
    # Controles globales
    html.Div([
        html.Div([
            html.Div([
                html.Label("üìÖ Rango de fechas:", className="fw-bold"),
                html.Div([
                    dcc.Dropdown(
                        id='dd-fecha-desde',
                        placeholder="Desde...",
                        style={'width': '150px'}
                    ),
                    html.Span(" - ", className="mx-2"),
                    dcc.Dropdown(
                        id='dd-fecha-hasta',
                        placeholder="Hasta...",
                        style={'width': '150px'}
                    )
                ], className="d-flex align-items-center")
            ], className="col-md-4"),
            
            html.Div([
                html.Label("üìà M√©trica:", className="fw-bold"),
                dcc.RadioItems(
                    id='rb-metrica',
                    options=[
                        {'label': 'Niveles', 'value': 'niveles'},
                        {'label': 'Var. Trim %', 'value': 'var_trim'},
                        {'label': 'Var. Anual %', 'value': 'var_yoy'},
                        {'label': '√çndice', 'value': 'index'}
                    ],
                    value='niveles',
                    inline=True,
                    className="mt-1"
                )
            ], className="col-md-4"),
            
            html.Div([
                html.Label("üìä Serie base:", className="fw-bold"),
                dcc.RadioItems(
                    id='rb-serie-base',
                    options=[
                        {'label': 'Con estacionalidad', 'value': 'estacional'},
                        {'label': 'Desestacionalizada', 'value': 'desest'}
                    ],
                    value='estacional',
                    inline=True,
                    className="mt-1"
                )
            ], className="col-md-4")
        ], className="row")
    ], className="container-fluid bg-light p-3 mb-4 border rounded"),
    
    # Tabs para las diferentes vistas
    dcc.Tabs(id='tabs-main', value='tab-overview', children=[
        dcc.Tab(label='üìä Overview', value='tab-overview'),
        dcc.Tab(label='üìà An√°lisis Temporal', value='tab-temporal'),
        dcc.Tab(label='üè≠ An√°lisis Sectorial', value='tab-sectorial'),
        dcc.Tab(label='üìê Sector √ó Tama√±o', value='tab-tama√±o'),
        dcc.Tab(label='‚öñÔ∏è Comparaciones', value='tab-comparaciones'),
        dcc.Tab(label='üîî Alertas', value='tab-alertas'),
        dcc.Tab(label='üìã Datos Crudos', value='tab-datos'),
        dcc.Tab(label='üìö Metodolog√≠a', value='tab-metodologia')
    ], className="mb-4"),
    
    # Contenedor para el contenido de las tabs
    html.Div(id='tab-content', className="container-fluid"),
    
    # Store para datos compartidos
    dcc.Store(id='store-data', storage_type='memory'),
    dcc.Store(id='store-filtered-data', storage_type='memory'),
    
    # Footer
    html.Div([
        html.Hr(),
        html.P([
            "Dashboard V1 | √öltima actualizaci√≥n: ",
            html.Span(id='last-update', children=datetime.now().strftime('%d/%m/%Y %H:%M')),
            " | Datos: SIPA/MTEySS"
        ], className="text-center text-muted small")
    ], className="mt-5")
])

# =====================================================================
# FUNCIONES DE CREACI√ìN DE VISTAS
# =====================================================================

def create_overview_view(data, serie_base, fecha_desde, fecha_hasta):
    """
    Vista 1: Overview - KPIs principales y distribuci√≥n sectorial.
    """
    # Obtener datos seg√∫n serie base
    if serie_base == 'desest':
        c1 = data.get('C1.2', pd.DataFrame())
        c2 = data.get('C2.2', pd.DataFrame())
    else:
        c1 = data.get('C1.1', pd.DataFrame())
        c2 = data.get('C2.1', pd.DataFrame())
    
    c3 = data.get('C3', pd.DataFrame())
    
    # Filtrar por fechas si se especifican
    if fecha_desde and 'Date' in c1.columns:
        fecha_desde_dt = parse_period_string(fecha_desde)
        if fecha_desde_dt:
            c1 = c1[c1['Date'] >= fecha_desde_dt]
    
    if fecha_hasta and 'Date' in c1.columns:
        fecha_hasta_dt = parse_period_string(fecha_hasta)
        if fecha_hasta_dt:
            c1 = c1[c1['Date'] <= fecha_hasta_dt]
    
    # Calcular KPIs
    kpis = get_latest_period_data({'C1.1': c1})
    
    # Calcular sectores top
    if not c3.empty and 'Sector' in c3.columns and 'Empleo' in c3.columns:
        latest_c3 = c3.groupby('Sector')['Empleo'].last().reset_index()
        latest_c3 = latest_c3.sort_values('Empleo', ascending=False)
        top_up = latest_c3.iloc[0]['Sector'] if len(latest_c3) > 0 else "N/D"
        top_down = latest_c3.iloc[-1]['Sector'] if len(latest_c3) > 0 else "N/D"
        
        # Gr√°fico de torta
        fig_torta = px.pie(
            latest_c3.head(8),
            values='Empleo',
            names='Sector',
            title='Distribuci√≥n sectorial actual',
            color_discrete_sequence=px.colors.sequential.Blues_r
        )
    else:
        top_up = "N/D"
        top_down = "N/D"
        fig_torta = go.Figure()
    
    # Sparkline del total
    if not c1.empty and 'Date' in c1.columns and 'Empleo' in c1.columns:
        fig_spark = go.Figure()
        fig_spark.add_trace(go.Scatter(
            x=c1['Date'],
            y=c1['Empleo'],
            mode='lines',
            fill='tozeroy',
            line=dict(color=COLORS['primary'], width=2),
            fillcolor='rgba(31, 119, 180, 0.2)'
        ))
        fig_spark.update_layout(
            title='Evoluci√≥n del empleo total',
            showlegend=False,
            height=300,
            margin=dict(l=0, r=0, t=30, b=0),
            xaxis=dict(showgrid=False, zeroline=False),
            yaxis=dict(showgrid=True, gridcolor='rgba(0,0,0,0.1)')
        )
    else:
        fig_spark = go.Figure()
    
    return html.Div([
        # Fila de KPIs
        html.Div([
            html.Div([
                create_kpi_card(
                    "Empleo Total", 
                    kpis['empleo_actual'],
                    subtitle=f"Per√≠odo: {kpis['periodo']}",
                    id_prefix="kpi-total"
                )
            ], className="col-md-3"),
            html.Div([
                create_kpi_card(
                    "Var. Trimestral",
                    kpis['var_trim'],
                    subtitle="vs trimestre anterior",
                    id_prefix="kpi-trim"
                )
            ], className="col-md-3"),
            html.Div([
                create_kpi_card(
                    "Var. Interanual",
                    kpis['var_yoy'],
                    subtitle="vs mismo trimestre a√±o anterior",
                    id_prefix="kpi-yoy"
                )
            ], className="col-md-3"),
            html.Div([
                create_kpi_card("Sector ‚Üë", top_up, id_prefix="kpi-top-up")
            ], className="col-md-3")
        ], className="row mb-4"),
        
        # Fila de gr√°ficos
        html.Div([
            html.Div([
                dcc.Graph(id='share-c3-torta', figure=fig_torta)
            ], className="col-md-6"),
            html.Div([
                dcc.Graph(id='spark-total', figure=fig_spark)
            ], className="col-md-6")
        ], className="row"),
        
        # Bot√≥n de descarga
        html.Div([
            html.Button("üì• Descargar datos Overview", 
                       id="btn-overview-download",
                       className="btn btn-primary mt-3")
        ])
    ])

def create_temporal_view(data, serie_base, metrica, fecha_desde, fecha_hasta):
    """
    Vista 2: An√°lisis Temporal - Series de tiempo con m√©tricas configurables.
    """
    return html.Div([
        # Controles espec√≠ficos
        html.Div([
            html.Div([
                html.Label("Dataset:", className="me-2"),
                dcc.RadioItems(
                    id='rb-dataset-temporal',
                    options=[
                        {'label': 'Total pa√≠s', 'value': 'total'},
                        {'label': 'Por sector', 'value': 'sectorial'}
                    ],
                    value='total',
                    inline=True,
                    className="me-4"
                )
            ], className="d-inline-flex align-items-center"),
            
            html.Div([
                dcc.Checklist(
                    id='check-promedio-movil',
                    options=[{'label': 'Mostrar promedio m√≥vil (4T)', 'value': 'show'}],
                    value=[],
                    inline=True
                )
            ], className="d-inline-flex align-items-center ms-4")
        ], className="mb-3"),
        
        # Selector de sectores (aparece si se elige "Por sector")
        html.Div(id='div-selector-sectores', children=[
            dcc.Dropdown(
                id='dd-sectores-temporal',
                multi=True,
                placeholder="Seleccione sectores...",
                options=[
                    {'label': 'Agricultura, ganader√≠a y pesca', 'value': 'Agricultura, ganader√≠a y pesca'},
                    {'label': 'Miner√≠a y petr√≥leo', 'value': 'Miner√≠a y petr√≥leo (3)'},
                    {'label': 'Industria', 'value': 'Industria'},
                    {'label': 'Electricidad, gas y agua', 'value': 'Electricidad, gas y agua (3)'},
                    {'label': 'Construcci√≥n', 'value': 'Construcci√≥n'},
                    {'label': 'Comercio', 'value': 'Comercio'},
                    {'label': 'Servicios', 'value': 'Servicios'}
                ],
                value=['Industria', 'Comercio', 'Servicios']
            )
        ], style={'display': 'none'}),
        
        # Gr√°fico principal
        dcc.Graph(id='ts-main', style={'height': '500px'}),
        
        # Tabla de estad√≠sticas
        html.Div(id='div-stats-temporal', className="mt-3")
    ])

def create_sectorial_view(data):
    """
    Vista 3: An√°lisis Sectorial - Navegaci√≥n por jerarqu√≠a CIIU.
    """
    return html.Div([
        # Controles
        html.Div([
            html.Div([
                html.Label("Nivel CIIU:", className="me-2"),
                dcc.Dropdown(
                    id='dd-nivel-ciiu',
                    options=[
                        {'label': 'C3 - Letra (14 sectores)', 'value': 'C3'},
                        {'label': 'C4 - 2 d√≠gitos (56 ramas)', 'value': 'C4'},
                        {'label': 'C6 - 3 d√≠gitos (147 ramas)', 'value': 'C6'},
                        {'label': 'C7 - 4 d√≠gitos (301 ramas)', 'value': 'C7'}
                    ],
                    value='C4',
                    style={'width': '300px'}
                )
            ], className="col-md-4"),
            
            html.Div([
                html.Label("C√≥digos:", className="me-2"),
                dcc.Dropdown(
                    id='dd-codigos-sectorial',
                    multi=True,
                    placeholder="Buscar por c√≥digo o descripci√≥n..."
                )
            ], className="col-md-6"),
            
            html.Div([
                dcc.Checklist(
                    id='check-top-n',
                    options=[{'label': 'Top 10', 'value': 'show'}],
                    value=['show'],
                    inline=True
                )
            ], className="col-md-2")
        ], className="row mb-3"),
        
        # Panel 2x2
        html.Div([
            html.Div([
                dcc.Graph(id='bars-ultimo', style={'height': '400px'})
            ], className="col-md-6"),
            html.Div([
                dcc.Graph(id='ts-sector', style={'height': '400px'})
            ], className="col-md-6")
        ], className="row mb-3"),
        
        html.Div([
            html.Div(id='tbl-sector-container', className="col-md-12")
        ], className="row")
    ])

def create_tama√±o_view(data):
    """
    Vista 4: Sector √ó Tama√±o - An√°lisis por tama√±o de empresa.
    """
    return html.Div([
        # Controles
        html.Div([
            html.Div([
                html.Label("Sector:", className="me-2"),
                dcc.Dropdown(
                    id='dd-sector-c5',
                    options=[
                        {'label': 'Industria', 'value': 'Industria'},
                        {'label': 'Comercio', 'value': 'Comercio'},
                        {'label': 'Servicios', 'value': 'Servicios'},
                        {'label': 'Total', 'value': 'Total'}
                    ],
                    value='Industria',
                    style={'width': '200px'}
                )
            ], className="col-md-4"),
            
            html.Div([
                html.Label("Tama√±o:", className="me-2"),
                dcc.Checklist(
                    id='check-tama√±o-c5',
                    options=[
                        {'label': 'Grandes', 'value': 'Grandes'},
                        {'label': 'Medianas', 'value': 'Medianas'},
                        {'label': 'Peque√±as', 'value': 'Peque√±as'},
                        {'label': 'Micro', 'value': 'Micro'}
                    ],
                    value=['Grandes', 'Medianas', 'Peque√±as', 'Micro'],
                    inline=True
                )
            ], className="col-md-8")
        ], className="row mb-3"),
        
        # Gr√°ficos
        html.Div([
            html.Div([
                dcc.Graph(id='stack-c5', style={'height': '400px'})
            ], className="col-md-6"),
            html.Div([
                dcc.Graph(id='ts-c5', style={'height': '400px'})
            ], className="col-md-6")
        ], className="row mb-3"),
        
        # Tabla
        html.Div(id='tbl-c5-container', className="mt-3")
    ])

def create_comparaciones_view(data):
    """
    Vista 5: Comparaciones Personalizadas - An√°lisis A vs B.
    """
    # Obtener per√≠odos disponibles
    periods = []
    c11 = data.get('C1.1', pd.DataFrame())
    if not c11.empty and 'Per√≠odo' in c11.columns:
        periods = c11['Per√≠odo'].unique().tolist()
    
    return html.Div([
        # Controles de per√≠odos
        html.Div([
            html.Div([
                html.H5("Per√≠odo A", className="text-primary"),
                dcc.Dropdown(
                    id='dd-periodo-a',
                    options=[{'label': p, 'value': p} for p in periods],
                    placeholder="Seleccione per√≠odo A..."
                )
            ], className="col-md-6"),
            html.Div([
                html.H5("Per√≠odo B", className="text-info"),
                dcc.Dropdown(
                    id='dd-periodo-b',
                    options=[{'label': p, 'value': p} for p in periods],
                    placeholder="Seleccione per√≠odo B..."
                )
            ], className="col-md-6")
        ], className="row mb-3"),
        
        # Tipo de comparaci√≥n
        html.Div([
            html.Label("Tipo de comparaci√≥n:", className="me-2"),
            dcc.RadioItems(
                id='rb-tipo-comparacion',
                options=[
                    {'label': 'Diferencia absoluta', 'value': 'abs'},
                    {'label': 'Diferencia %', 'value': 'pct'},
                    {'label': 'Ratio A/B', 'value': 'ratio'}
                ],
                value='pct',
                inline=True
            )
        ], className="mb-3"),
        
        # Resultados
        html.Div(id='div-comparacion-results')
    ])

def create_alertas_view(data, fecha_desde=None, fecha_hasta=None):
    """
    Vista 6: Alertas & Hallazgos - Detecci√≥n de anomal√≠as.
    """
    return html.Div([
        # Configuraci√≥n de umbrales
        html.Div([
            html.H5("‚öôÔ∏è Configuraci√≥n de Alertas", className="mb-3"),
            html.Div([
                html.Div([
                    html.Label("Umbral variaci√≥n trimestral (%):", className="me-2"),
                    dcc.Input(
                        id='input-umbral-trim',
                        type='number',
                        value=5,
                        min=0,
                        max=50,
                        step=0.5,
                        style={'width': '100px'}
                    )
                ], className="col-md-3"),
                html.Div([
                    html.Label("Umbral variaci√≥n anual (%):", className="me-2"),
                    dcc.Input(
                        id='input-umbral-yoy',
                        type='number',
                        value=10,
                        min=0,
                        max=50,
                        step=0.5,
                        style={'width': '100px'}
                    )
                ], className="col-md-3"),
                html.Div([
                    html.Label("Activar alertas autom√°ticas:", className="me-2"),
                    dcc.Checklist(
                        id='check-auto-alertas',
                        options=[{'label': ' S√≠', 'value': 'auto'}],
                        value=['auto'],
                        inline=True
                    )
                ], className="col-md-3"),
                html.Div([
                    html.Button("üîç Actualizar an√°lisis", 
                               id="btn-run-alertas",
                               className="btn btn-warning")
                ], className="col-md-3")
            ], className="row mb-4")
        ]),
        
        # Informaci√≥n del per√≠odo analizado
        html.Div(id='div-periodo-alertas', className="alert alert-light mb-3"),
        
        # Resultados de alertas - se cargan autom√°ticamente
        html.Div(id='div-alertas-results'),
        
        # Store para trigger inicial y fechas
        dcc.Store(id='store-alertas-init', data={'init': True}),
        dcc.Store(id='store-alertas-fechas', data={'desde': fecha_desde, 'hasta': fecha_hasta})
    ])

def create_datos_view(data):
    """
    Vista 7: Datos Crudos - Tabla con filtros y exportaci√≥n.
    """
    return html.Div([
        # Selector de dataset
        html.Div([
            html.Label("Dataset:", className="me-2"),
            dcc.Dropdown(
                id='dd-dataset-raw',
                options=[
                    {'label': 'C1.1 - Serie temporal con estacionalidad', 'value': 'C1.1'},
                    {'label': 'C1.2 - Serie temporal desestacionalizada', 'value': 'C1.2'},
                    {'label': 'C2.1 - Por sector con estacionalidad', 'value': 'C2.1'},
                    {'label': 'C2.2 - Por sector desestacionalizada', 'value': 'C2.2'},
                    {'label': 'C3 - Por letra CIIU', 'value': 'C3'},
                    {'label': 'C4 - Por 2 d√≠gitos CIIU', 'value': 'C4'},
                    {'label': 'C5 - Por sector y tama√±o', 'value': 'C5'},
                    {'label': 'C6 - Por 3 d√≠gitos CIIU', 'value': 'C6'},
                    {'label': 'C7 - Por 4 d√≠gitos CIIU', 'value': 'C7'},
                    {'label': 'Descriptores CIIU', 'value': 'descriptores_CIIU'}
                ],
                value='C1.1',
                style={'width': '400px'}
            )
        ], className="mb-3"),
        
        # Tabla de datos
        html.Div(id='div-raw-table'),
        
        # Bot√≥n de exportaci√≥n
        html.Div([
            html.Button("üì• Exportar a CSV", 
                       id="btn-export-raw",
                       className="btn btn-success mt-3")
        ])
    ])

def create_metodologia_view():
    """
    Vista 8: Metodolog√≠a - Explicaci√≥n de indicadores y f√≥rmulas de c√°lculo.
    """
    return html.Div([
        html.H3("üìö Metodolog√≠a e Indicadores", className="mb-4"),
        
        # Introducci√≥n
        html.Div([
            html.H5("Introducci√≥n", className="text-primary mb-3"),
            html.P([
                "Este dashboard utiliza datos del Sistema Integrado Previsional Argentino (SIPA) ",
                "procesados trimestralmente por el Ministerio de Trabajo, Empleo y Seguridad Social. ",
                "Los indicadores se calculan autom√°ticamente a partir de las series de empleo registrado."
            ], className="lead"),
            html.Hr()
        ], className="mb-4"),
        
        # Indicadores Principales
        html.Div([
            html.H5("1. Indicadores Principales", className="text-primary mb-3"),
            
            # Empleo Total
            html.Div([
                html.H6("üìä Empleo Total (Niveles)", className="fw-bold"),
                html.P("Cantidad absoluta de trabajadores registrados en el per√≠odo."),
                html.Div([
                    html.Code("Empleo Total = Œ£(Trabajadores registrados en SIPA)", className="bg-light p-2 d-block")
                ], className="mb-3")
            ], className="card p-3 mb-3"),
            
            # Variaci√≥n Trimestral
            html.Div([
                html.H6("üìà Variaci√≥n Trimestral (%)", className="fw-bold"),
                html.P("Cambio porcentual del empleo respecto al trimestre anterior."),
                html.Div([
                    html.Code("Var. Trimestral = ((Empleo(t) - Empleo(t-1)) / Empleo(t-1)) √ó 100", className="bg-light p-2 d-block"),
                    html.Small("Donde t = trimestre actual, t-1 = trimestre anterior", className="text-muted")
                ], className="mb-3")
            ], className="card p-3 mb-3"),
            
            # Variaci√≥n Interanual
            html.Div([
                html.H6("üìÖ Variaci√≥n Interanual (a√±o a a√±o) (%)", className="fw-bold"),
                html.P("Cambio porcentual del empleo respecto al mismo trimestre del a√±o anterior."),
                html.Div([
                    html.Code("Var. Interanual = ((Empleo(t) - Empleo(t-4)) / Empleo(t-4)) √ó 100", className="bg-light p-2 d-block"),
                    html.Small("Donde t = trimestre actual, t-4 = mismo trimestre a√±o anterior", className="text-muted")
                ], className="mb-3")
            ], className="card p-3 mb-3"),
            
            # √çndice Base 100
            html.Div([
                html.H6("üìê √çndice Base 100", className="fw-bold"),
                html.P("√çndice que muestra la evoluci√≥n del empleo tomando un per√≠odo base como referencia (100)."),
                html.Div([
                    html.Code("√çndice = (Empleo(t) / Empleo(base)) √ó 100", className="bg-light p-2 d-block"),
                    html.Small("Per√≠odo base: 1¬∫ Trimestre 1996", className="text-muted")
                ], className="mb-3")
            ], className="card p-3 mb-3"),
        ], className="mb-4"),
        
        # Series Temporales
        html.Div([
            html.H5("2. Series Temporales", className="text-primary mb-3"),
            
            html.Div([
                html.H6("Series con Estacionalidad (C1.1, C2.1)", className="fw-bold"),
                html.P("Datos originales sin ajuste estacional. Reflejan las fluctuaciones naturales del empleo por temporada."),
                html.Ul([
                    html.Li("C1.1: Serie total pa√≠s con estacionalidad"),
                    html.Li("C2.1: Serie por sector econ√≥mico con estacionalidad")
                ])
            ], className="card p-3 mb-3"),
            
            html.Div([
                html.H6("Series Desestacionalizadas (C1.2, C2.2)", className="fw-bold"),
                html.P("Datos ajustados para eliminar efectos estacionales, permitiendo identificar tendencias subyacentes."),
                html.Ul([
                    html.Li("C1.2: Serie total pa√≠s desestacionalizada"),
                    html.Li("C2.2: Serie por sector econ√≥mico desestacionalizada")
                ]),
                html.Small("M√©todo: X-13ARIMA-SEATS del US Census Bureau", className="text-muted")
            ], className="card p-3 mb-3"),
        ], className="mb-4"),
        
        # Clasificaci√≥n CIIU
        html.Div([
            html.H5("3. Clasificaci√≥n Industrial (CIIU)", className="text-primary mb-3"),
            
            html.P([
                "Los datos sectoriales se organizan seg√∫n la Clasificaci√≥n Industrial Internacional Uniforme (CIIU) Rev. 3, ",
                "con diferentes niveles de desagregaci√≥n:"
            ]),
            
            html.Table([
                html.Thead([
                    html.Tr([
                        html.Th("Nivel", className="text-center"),
                        html.Th("Descripci√≥n"),
                        html.Th("Cantidad"),
                        html.Th("Ejemplo")
                    ])
                ]),
                html.Tbody([
                    html.Tr([
                        html.Td("C3 - Letra", className="text-center fw-bold"),
                        html.Td("Secciones principales"),
                        html.Td("14 sectores"),
                        html.Td("A: Agricultura, B: Pesca, C: Miner√≠a...")
                    ]),
                    html.Tr([
                        html.Td("C4 - 2 d√≠gitos", className="text-center fw-bold"),
                        html.Td("Divisiones"),
                        html.Td("56 ramas"),
                        html.Td("15: Alimentos, 24: Qu√≠micos...")
                    ]),
                    html.Tr([
                        html.Td("C6 - 3 d√≠gitos", className="text-center fw-bold"),
                        html.Td("Grupos"),
                        html.Td("147 ramas"),
                        html.Td("151: Carnes, 241: Qu√≠micos b√°sicos...")
                    ]),
                    html.Tr([
                        html.Td("C7 - 4 d√≠gitos", className="text-center fw-bold"),
                        html.Td("Clases"),
                        html.Td("301 ramas"),
                        html.Td("1511: Mataderos, 2411: Gases industriales...")
                    ])
                ])
            ], className="table table-striped table-hover mb-3"),
        ], className="mb-4"),
        
        # Tama√±o de Empresas
        html.Div([
            html.H5("4. Clasificaci√≥n por Tama√±o (C5)", className="text-primary mb-3"),
            
            html.P("El empleo se clasifica por tama√±o de empresa seg√∫n cantidad de empleados:"),
            
            html.Table([
                html.Thead([
                    html.Tr([
                        html.Th("Categor√≠a"),
                        html.Th("Rango de Empleados"),
                        html.Th("Sectores Analizados")
                    ])
                ]),
                html.Tbody([
                    html.Tr([
                        html.Td(html.Strong("Microempresas")),
                        html.Td("1 a 5 empleados"),
                        html.Td(rowSpan="4", style={'verticalAlign': 'middle'}, 
                               children="Industria, Comercio, Servicios, Total")
                    ]),
                    html.Tr([
                        html.Td(html.Strong("Peque√±as")),
                        html.Td("6 a 25 empleados")
                    ]),
                    html.Tr([
                        html.Td(html.Strong("Medianas")),
                        html.Td("26 a 100 empleados")
                    ]),
                    html.Tr([
                        html.Td(html.Strong("Grandes")),
                        html.Td("M√°s de 100 empleados")
                    ])
                ])
            ], className="table table-striped table-hover mb-3"),
        ], className="mb-4"),
        
        # Indicadores Derivados
        html.Div([
            html.H5("5. Indicadores Derivados y An√°lisis", className="text-primary mb-3"),
            
            html.Div([
                html.H6("üîÑ Promedio M√≥vil 4 Trimestres", className="fw-bold"),
                html.P("Suaviza la serie temporal calculando el promedio de los √∫ltimos 4 trimestres."),
                html.Code("PM4T(t) = (Empleo(t) + Empleo(t-1) + Empleo(t-2) + Empleo(t-3)) / 4", 
                         className="bg-light p-2 d-block mb-3")
            ], className="card p-3 mb-3"),
            
            html.Div([
                html.H6("üéØ Participaci√≥n Sectorial (%)", className="fw-bold"),
                html.P("Porcentaje que representa cada sector sobre el empleo total."),
                html.Code("Participaci√≥n = (Empleo_Sector / Empleo_Total) √ó 100", 
                         className="bg-light p-2 d-block mb-3")
            ], className="card p-3 mb-3"),
            
            html.Div([
                html.H6("‚ö†Ô∏è Detecci√≥n de Anomal√≠as", className="fw-bold"),
                html.P("Identifica valores at√≠picos usando desviaci√≥n est√°ndar sobre ventana m√≥vil."),
                html.Code("Anomal√≠a si: |Valor - Media| > (2 √ó Desv. Est√°ndar)", 
                         className="bg-light p-2 d-block mb-3"),
                html.Small("Ventana m√≥vil: 8 trimestres", className="text-muted")
            ], className="card p-3 mb-3"),
        ], className="mb-4"),
        
        # Sistema de Alertas
        html.Div([
            html.H5("6. Sistema de Alertas Autom√°ticas", className="text-primary mb-3"),
            
            html.P([
                "El sistema de alertas monitorea autom√°ticamente los datos para identificar situaciones que requieren atenci√≥n. ",
                "Se ejecuta en tiempo real al cargar los datos y genera notificaciones categorizadas por tipo y severidad."
            ]),
            
            # Tipos de Alertas
            html.Div([
                html.H6("üìä Tipos de Alertas", className="fw-bold mb-3"),
                
                html.Div([
                    html.H6("üî¥ Alertas Cr√≠ticas", className="text-danger"),
                    html.P("Variaciones extremas que requieren atenci√≥n inmediata:"),
                    html.Ul([
                        html.Li("Ca√≠da del empleo > 5% trimestral"),
                        html.Li("Ca√≠da del empleo > 10% interanual"),
                        html.Li("P√©rdida de m√°s de 50,000 empleos en un trimestre"),
                        html.Li("Sector con ca√≠da > 15% interanual")
                    ])
                ], className="card p-3 mb-3 border-danger"),
                
                html.Div([
                    html.H6("üü° Alertas de Advertencia", className="text-warning"),
                    html.P("Cambios significativos que requieren seguimiento:"),
                    html.Ul([
                        html.Li("Variaci√≥n trimestral entre ¬±3% y ¬±5%"),
                        html.Li("Variaci√≥n interanual entre ¬±5% y ¬±10%"),
                        html.Li("Cambio de tendencia (de positiva a negativa o viceversa)"),
                        html.Li("Aceleraci√≥n o desaceleraci√≥n marcada en la tasa de crecimiento")
                    ])
                ], className="card p-3 mb-3 border-warning"),
                
                html.Div([
                    html.H6("üü¢ Alertas Positivas", className="text-success"),
                    html.P("Mejoras notables en los indicadores:"),
                    html.Ul([
                        html.Li("Crecimiento del empleo > 3% trimestral"),
                        html.Li("Crecimiento del empleo > 5% interanual"),
                        html.Li("Creaci√≥n de m√°s de 30,000 empleos en un trimestre"),
                        html.Li("Recuperaci√≥n despu√©s de 3+ trimestres negativos")
                    ])
                ], className="card p-3 mb-3 border-success"),
                
                html.Div([
                    html.H6("üîµ Alertas Informativas", className="text-info"),
                    html.P("Informaci√≥n relevante sin implicancias directas:"),
                    html.Ul([
                        html.Li("Nuevo m√°ximo hist√≥rico de empleo"),
                        html.Li("Cambios en la composici√≥n sectorial > 2 puntos porcentuales"),
                        html.Li("Datos preliminares o sujetos a revisi√≥n"),
                        html.Li("Per√≠odos con informaci√≥n incompleta")
                    ])
                ], className="card p-3 mb-3 border-info"),
            ], className="mb-3"),
            
            # Algoritmos de Detecci√≥n
            html.Div([
                html.H6("üîç Algoritmos de Detecci√≥n", className="fw-bold mb-3"),
                
                html.Div([
                    html.P(html.Strong("1. Detecci√≥n de Valores At√≠picos (Outliers)")),
                    html.Code("Outlier = |X - Œº| > k √ó œÉ", className="bg-light p-2 d-block mb-2"),
                    html.Small([
                        "Donde: X = valor observado, Œº = media m√≥vil (8 trimestres), ",
                        "œÉ = desviaci√≥n est√°ndar m√≥vil, k = 2 (factor de sensibilidad)"
                    ], className="text-muted")
                ], className="mb-3"),
                
                html.Div([
                    html.P(html.Strong("2. Detecci√≥n de Cambios de Tendencia")),
                    html.Code("Cambio = sign(Var[t]) ‚â† sign(Var[t-1]) por 2+ per√≠odos", className="bg-light p-2 d-block mb-2"),
                    html.Small("Identifica cuando la direcci√≥n del cambio se invierte consistentemente", className="text-muted")
                ], className="mb-3"),
                
                html.Div([
                    html.P(html.Strong("3. Detecci√≥n de Aceleraci√≥n/Desaceleraci√≥n")),
                    html.Code("Aceleraci√≥n = |Var[t] - Var[t-1]| > 1.5 puntos porcentuales", className="bg-light p-2 d-block mb-2"),
                    html.Small("Detecta cambios bruscos en la velocidad de crecimiento", className="text-muted")
                ], className="mb-3"),
                
                html.Div([
                    html.P(html.Strong("4. An√°lisis Sectorial Comparativo")),
                    html.Code("Alerta Sectorial = Var_Sector < (Var_Total - 5pp)", className="bg-light p-2 d-block mb-2"),
                    html.Small("Identifica sectores con desempe√±o significativamente inferior al promedio", className="text-muted")
                ], className="mb-3"),
            ]),
            
            # Configuraci√≥n de Umbrales
            html.Div([
                html.H6("‚öôÔ∏è Configuraci√≥n de Umbrales", className="fw-bold mb-3"),
                
                html.Table([
                    html.Thead([
                        html.Tr([
                            html.Th("Par√°metro"),
                            html.Th("Valor Por Defecto"),
                            html.Th("Rango Configurable"),
                            html.Th("Descripci√≥n")
                        ])
                    ]),
                    html.Tbody([
                        html.Tr([
                            html.Td("Umbral Cr√≠tico Trimestral"),
                            html.Td("¬±5%"),
                            html.Td("3% - 10%"),
                            html.Td("Variaci√≥n trimestral para alerta cr√≠tica")
                        ]),
                        html.Tr([
                            html.Td("Umbral Cr√≠tico Interanual"),
                            html.Td("¬±10%"),
                            html.Td("5% - 15%"),
                            html.Td("Variaci√≥n interanual para alerta cr√≠tica")
                        ]),
                        html.Tr([
                            html.Td("Ventana de An√°lisis"),
                            html.Td("8 trimestres"),
                            html.Td("4 - 12 trimestres"),
                            html.Td("Per√≠odos para c√°lculo de estad√≠sticas m√≥viles")
                        ]),
                        html.Tr([
                            html.Td("Factor de Sensibilidad"),
                            html.Td("2œÉ"),
                            html.Td("1.5œÉ - 3œÉ"),
                            html.Td("Desviaciones est√°ndar para outliers")
                        ]),
                        html.Tr([
                            html.Td("M√≠nimo de Per√≠odos"),
                            html.Td("2"),
                            html.Td("1 - 4"),
                            html.Td("Per√≠odos consecutivos para confirmar tendencia")
                        ])
                    ])
                ], className="table table-striped table-hover mb-3"),
            ]),
            
            # Interpretaci√≥n y Acciones
            html.Div([
                html.H6("üìå Interpretaci√≥n y Acciones Sugeridas", className="fw-bold mb-3"),
                
                html.Div([
                    html.P(html.Strong("Para Alertas Cr√≠ticas:")),
                    html.Ol([
                        html.Li("Verificar la calidad de los datos y posibles errores de carga"),
                        html.Li("Analizar el contexto econ√≥mico del per√≠odo"),
                        html.Li("Revisar sectores m√°s afectados"),
                        html.Li("Comparar con indicadores complementarios"),
                        html.Li("Generar reporte detallado para an√°lisis profundo")
                    ])
                ], className="alert alert-danger"),
                
                html.Div([
                    html.P(html.Strong("Para Alertas de Advertencia:")),
                    html.Ol([
                        html.Li("Monitorear evoluci√≥n en pr√≥ximos per√≠odos"),
                        html.Li("Identificar factores causales"),
                        html.Li("Evaluar si es un cambio estructural o coyuntural"),
                        html.Li("Preparar an√°lisis de escenarios")
                    ])
                ], className="alert alert-warning"),
            ]),
            
            # Notas sobre el Sistema
            html.Div([
                html.H6("üìù Notas Importantes del Sistema de Alertas", className="fw-bold mb-3"),
                html.Ul([
                    html.Li("Las alertas se generan autom√°ticamente al cargar nuevos datos"),
                    html.Li("Los umbrales pueden ajustarse seg√∫n el contexto econ√≥mico"),
                    html.Li("Se priorizan las alertas m√°s recientes (√∫ltimos 4 trimestres)"),
                    html.Li("Las alertas sectoriales consideran el peso relativo del sector"),
                    html.Li("El sistema aprende de patrones hist√≥ricos para mejorar la detecci√≥n"),
                    html.Li("Se pueden exportar las alertas para seguimiento externo")
                ])
            ], className="alert alert-info"),
        ], className="mb-4"),
        
        # Fuentes de Datos
        html.Div([
            html.H5("7. Fuentes y Actualizaci√≥n", className="text-primary mb-3"),
            
            html.Div([
                html.P([
                    html.Strong("Fuente primaria: "),
                    "Sistema Integrado Previsional Argentino (SIPA)"
                ]),
                html.P([
                    html.Strong("Procesamiento: "),
                    "Ministerio de Trabajo, Empleo y Seguridad Social (MTEySS)"
                ]),
                html.P([
                    html.Strong("Periodicidad: "),
                    "Trimestral con rezago de 2-3 meses"
                ]),
                html.P([
                    html.Strong("Cobertura temporal: "),
                    "Desde 1¬∫ Trimestre 1996 hasta la actualidad"
                ]),
                html.P([
                    html.Strong("√öltima actualizaci√≥n de datos: "),
                    "4¬∫ Trimestre 2024"
                ])
            ], className="card p-3"),
        ], className="mb-4"),
        
        # Notas T√©cnicas
        html.Div([
            html.H5("8. Notas T√©cnicas", className="text-primary mb-3"),
            
            html.Div([
                html.H6("üìù Consideraciones Importantes:"),
                html.Ul([
                    html.Li("Los datos corresponden √∫nicamente al empleo registrado (formal)"),
                    html.Li("No incluye empleo p√∫blico provincial ni municipal"),
                    html.Li("Las series pueden tener revisiones retroactivas"),
                    html.Li("Valores faltantes se indican como 's.d.' (sin dato) en archivos fuente"),
                    html.Li("Los c√°lculos de variaciones requieren al menos 2 per√≠odos (trimestral) o 5 per√≠odos (interanual)")
                ])
            ], className="alert alert-info"),
        ], className="mb-4"),
        
        # Glosario
        html.Div([
            html.H5("9. Glosario", className="text-primary mb-3"),
            
            html.Dl([
                html.Dt("SIPA"),
                html.Dd("Sistema Integrado Previsional Argentino", className="mb-2"),
                
                html.Dt("CIIU"),
                html.Dd("Clasificaci√≥n Industrial Internacional Uniforme de todas las actividades econ√≥micas", className="mb-2"),
                
                html.Dt("MTEySS"),
                html.Dd("Ministerio de Trabajo, Empleo y Seguridad Social", className="mb-2"),
                
                html.Dt("Empleo Registrado"),
                html.Dd("Trabajadores en relaci√≥n de dependencia con aportes al sistema de seguridad social", className="mb-2"),
                
                html.Dt("Desestacionalizaci√≥n"),
                html.Dd("Proceso estad√≠stico para remover patrones estacionales regulares de una serie temporal", className="mb-2"),
                
                html.Dt("KPI"),
                html.Dd("Key Performance Indicator (Indicador Clave de Desempe√±o)", className="mb-2"),
            ])
        ], className="mb-4")
    ])

# =====================================================================
# CALLBACKS
# =====================================================================

# Callback para inicializar los datos
@app.callback(
    Output('store-data', 'data'),
    Input('tabs-main', 'value')
)
def load_data_to_store(tab):
    """Carga los datos en el store cuando se inicia la aplicaci√≥n."""
    data = load_all_data()
    # Convertir DataFrames a dict para almacenar en Store
    data_dict = {}
    for key, df in data.items():
        if isinstance(df, pd.DataFrame):
            data_dict[key] = df.to_dict('records')
    return data_dict

# Callback para actualizar opciones de fechas
@app.callback(
    [Output('dd-fecha-desde', 'options'),
     Output('dd-fecha-hasta', 'options'),
     Output('dd-fecha-desde', 'value'),
     Output('dd-fecha-hasta', 'value')],
    Input('store-data', 'data')
)
def update_date_options(data_dict):
    """Actualiza las opciones de fecha bas√°ndose en los datos disponibles."""
    if not data_dict:
        return [], [], None, None
    
    # Reconstruir DataFrame
    c11_data = data_dict.get('C1.1', [])
    if not c11_data:
        return [], [], None, None
    
    c11 = pd.DataFrame(c11_data)
    if 'Per√≠odo' not in c11.columns:
        return [], [], None, None
    
    periods = sorted(c11['Per√≠odo'].unique())
    options = [{'label': p, 'value': p} for p in periods]
    
    # Valores por defecto: √∫ltimos 5 a√±os
    value_hasta = periods[-1] if periods else None
    value_desde = periods[-20] if len(periods) > 20 else periods[0] if periods else None
    
    return options, options, value_desde, value_hasta

# Callback principal para actualizar contenido de tabs
@app.callback(
    Output('tab-content', 'children'),
    [Input('tabs-main', 'value'),
     Input('store-data', 'data'),
     Input('rb-serie-base', 'value'),
     Input('rb-metrica', 'value'),
     Input('dd-fecha-desde', 'value'),
     Input('dd-fecha-hasta', 'value')]
)
def update_tab_content(active_tab, data_dict, serie_base, metrica, fecha_desde, fecha_hasta):
    """Actualiza el contenido seg√∫n la tab seleccionada."""
    if not data_dict:
        return html.Div("Cargando datos...", className="text-center p-5")
    
    # Reconstruir DataFrames
    data = {}
    for key, records in data_dict.items():
        data[key] = pd.DataFrame(records)
        # Re-procesar per√≠odos
        if 'Per√≠odo' in data[key].columns:
            data[key] = process_periods(data[key])
    
    # Renderizar vista seg√∫n tab
    if active_tab == 'tab-overview':
        return create_overview_view(data, serie_base, fecha_desde, fecha_hasta)
    elif active_tab == 'tab-temporal':
        return create_temporal_view(data, serie_base, metrica, fecha_desde, fecha_hasta)
    elif active_tab == 'tab-sectorial':
        return create_sectorial_view(data)
    elif active_tab == 'tab-tama√±o':
        return create_tama√±o_view(data)
    elif active_tab == 'tab-comparaciones':
        return create_comparaciones_view(data)
    elif active_tab == 'tab-alertas':
        return create_alertas_view(data, fecha_desde, fecha_hasta)
    elif active_tab == 'tab-datos':
        return create_datos_view(data)
    elif active_tab == 'tab-metodologia':
        return create_metodologia_view()
    else:
        return html.Div("Vista no implementada", className="text-center p-5")

# Callback para mostrar/ocultar selector de sectores
@app.callback(
    Output('div-selector-sectores', 'style'),
    Input('rb-dataset-temporal', 'value')
)
def toggle_sector_selector(dataset):
    """Muestra u oculta el selector de sectores seg√∫n el dataset elegido."""
    if dataset == 'sectorial':
        return {'display': 'block', 'marginTop': '10px'}
    return {'display': 'none'}

# Callback para actualizar gr√°fico temporal
@app.callback(
    Output('ts-main', 'figure'),
    [Input('rb-dataset-temporal', 'value'),
     Input('dd-sectores-temporal', 'value'),
     Input('check-promedio-movil', 'value'),
     Input('store-data', 'data'),
     Input('rb-serie-base', 'value'),
     Input('rb-metrica', 'value'),
     Input('dd-fecha-desde', 'value'),
     Input('dd-fecha-hasta', 'value')]
)
def update_temporal_chart(dataset, sectores, promedio_movil, data_dict, serie_base, 
                          metrica, fecha_desde, fecha_hasta):
    """Actualiza el gr√°fico de an√°lisis temporal."""
    if not data_dict:
        return go.Figure()
    
    fig = go.Figure()
    
    # Seleccionar serie seg√∫n configuraci√≥n
    if dataset == 'total':
        if serie_base == 'desest':
            df_key = 'C1.2'
        else:
            df_key = 'C1.1'
        
        df = pd.DataFrame(data_dict.get(df_key, []))
        if not df.empty:
            df = process_periods(df)
            df = calculate_variations(df)
            
            # Filtrar por fechas
            if fecha_desde and 'Date' in df.columns:
                fecha_desde_dt = parse_period_string(fecha_desde)
                if fecha_desde_dt:
                    df = df[df['Date'] >= fecha_desde_dt]
            
            if fecha_hasta and 'Date' in df.columns:
                fecha_hasta_dt = parse_period_string(fecha_hasta)
                if fecha_hasta_dt:
                    df = df[df['Date'] <= fecha_hasta_dt]
            
            # Seleccionar columna seg√∫n m√©trica
            if metrica == 'var_trim':
                y_col = 'var_trim'
                y_title = 'Variaci√≥n trimestral (%)'
            elif metrica == 'var_yoy':
                y_col = 'var_yoy'
                y_title = 'Variaci√≥n interanual (%)'
            elif metrica == 'index':
                y_col = 'index_100'
                y_title = '√çndice base 100'
            else:
                y_col = 'Empleo'
                y_title = 'Empleo (puestos de trabajo)'
            
            # L√≠nea principal
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df[y_col] if y_col in df.columns else df['Empleo'],
                mode='lines+markers',
                name='Empleo total',
                line=dict(color=COLORS['primary'], width=2)
            ))
            
            # Promedio m√≥vil si est√° activado
            if 'show' in promedio_movil and y_col in df.columns:
                df['MA4'] = df[y_col].rolling(window=4, min_periods=1).mean()
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['MA4'],
                    mode='lines',
                    name='Promedio m√≥vil (4T)',
                    line=dict(color=COLORS['secondary'], width=2, dash='dash')
                ))
            
            fig.update_layout(
                title=f'Evoluci√≥n temporal - {y_title}',
                xaxis_title='Per√≠odo',
                yaxis_title=y_title,
                hovermode='x unified',
                showlegend=True
            )
    
    else:  # dataset == 'sectorial'
        if serie_base == 'desest':
            df_key = 'C2.2'
        else:
            df_key = 'C2.1'
        
        df = pd.DataFrame(data_dict.get(df_key, []))
        if not df.empty and sectores:
            df = process_periods(df)
            
            # Filtrar por fechas
            if fecha_desde and 'Date' in df.columns:
                fecha_desde_dt = parse_period_string(fecha_desde)
                if fecha_desde_dt:
                    df = df[df['Date'] >= fecha_desde_dt]
            
            if fecha_hasta and 'Date' in df.columns:
                fecha_hasta_dt = parse_period_string(fecha_hasta)
                if fecha_hasta_dt:
                    df = df[df['Date'] <= fecha_hasta_dt]
            
            for sector in sectores:
                if sector in df.columns:
                    # Calcular m√©trica para cada sector
                    if metrica == 'var_trim':
                        y_col = f'{sector}_var_trim'
                        df[y_col] = df[sector].pct_change() * 100
                    elif metrica == 'var_yoy':
                        y_col = f'{sector}_var_yoy'
                        df[y_col] = df[sector].pct_change(4) * 100
                    elif metrica == 'index':
                        y_col = f'{sector}_index'
                        if df[sector].iloc[0] != 0:
                            df[y_col] = (df[sector] / df[sector].iloc[0]) * 100
                    else:
                        y_col = sector
                    
                    fig.add_trace(go.Scatter(
                        x=df['Date'],
                        y=df[y_col] if y_col in df.columns else df[sector],
                        mode='lines+markers',
                        name=str(sector)
                    ))
            
            y_title = {
                'var_trim': 'Variaci√≥n trimestral (%)',
                'var_yoy': 'Variaci√≥n interanual (%)',
                'index': '√çndice base 100',
                'niveles': 'Empleo (puestos de trabajo)'
            }.get(metrica, 'Empleo')
            
            fig.update_layout(
                title=f'Evoluci√≥n por sector - {y_title}',
                xaxis_title='Per√≠odo',
                yaxis_title=y_title,
                hovermode='x unified',
                showlegend=True
            )
    
    return fig

# Callback para actualizar opciones de c√≥digos sectoriales
@app.callback(
    Output('dd-codigos-sectorial', 'options'),
    [Input('dd-nivel-ciiu', 'value'),
     Input('store-data', 'data')]
)
def update_codigo_options(nivel_ciiu, data_dict):
    """Actualiza las opciones de c√≥digos seg√∫n el nivel CIIU seleccionado."""
    if not data_dict or not nivel_ciiu:
        return []
    
    # Obtener descriptores
    desc_data = data_dict.get('descriptores_CIIU', [])
    if not desc_data:
        return []
    
    desc_df = pd.DataFrame(desc_data)
    
    # Filtrar por tabla
    desc_filtered = desc_df[desc_df['Tabla'] == nivel_ciiu]
    
    # Crear opciones
    options = []
    for _, row in desc_filtered.iterrows():
        label = f"{row['C√≥digo']} - {row['Descripci√≥n'][:50]}..."
        options.append({'label': label, 'value': row['C√≥digo']})
    
    return options

# Callback para gr√°ficos sectoriales
@app.callback(
    [Output('bars-ultimo', 'figure'),
     Output('ts-sector', 'figure'),
     Output('tbl-sector-container', 'children')],
    [Input('dd-nivel-ciiu', 'value'),
     Input('dd-codigos-sectorial', 'value'),
     Input('check-top-n', 'value'),
     Input('store-data', 'data')]
)
def update_sectorial_charts(nivel_ciiu, codigos, top_n, data_dict):
    """Actualiza los gr√°ficos y tabla del an√°lisis sectorial."""
    if not data_dict or not nivel_ciiu:
        fig_vacio = go.Figure()
        fig_vacio.add_annotation(
            text="Seleccione un nivel CIIU para visualizar datos",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False,
            font=dict(size=14, color="gray")
        )
        return fig_vacio, fig_vacio, html.Div("Seleccione par√°metros", className="alert alert-info")
    
    # Obtener datos
    df = pd.DataFrame(data_dict.get(nivel_ciiu, []))
    if df.empty:
        fig_vacio = go.Figure()
        fig_vacio.add_annotation(
            text=f"No hay datos disponibles para {nivel_ciiu}",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False,
            font=dict(size=14, color="red")
        )
        return fig_vacio, fig_vacio, html.Div(
            f"No se encontraron datos para el nivel {nivel_ciiu}", 
            className="alert alert-warning"
        )
    
    # Procesar per√≠odos
    if 'Per√≠odo' in df.columns:
        df = process_periods(df)
    
    # Filtrar por c√≥digos si se especifican
    if codigos:
        df_filtrado = df[df['Sector'].isin(codigos)]
        if df_filtrado.empty:
            # Obtener descriptores para mostrar nombres
            desc_data = data_dict.get('descriptores_CIIU', [])
            desc_df = pd.DataFrame(desc_data)
            desc_filtered = desc_df[(desc_df['Tabla'] == nivel_ciiu) & (desc_df['C√≥digo'].isin(codigos))]
            
            nombres = ", ".join([f"{row['C√≥digo']} ({row['Descripci√≥n'][:30]}...)" 
                                for _, row in desc_filtered.iterrows()])
            
            fig_vacio = go.Figure()
            fig_vacio.add_annotation(
                text=f"No hay datos hist√≥ricos para: {nombres if nombres else ', '.join(codigos)}",
                xref="paper", yref="paper",
                x=0.5, y=0.5, showarrow=False,
                font=dict(size=12, color="orange"),
                wrap=True
            )
            mensaje = html.Div([
                html.H6("‚ö†Ô∏è No hay datos disponibles", className="text-warning"),
                html.P(f"Los c√≥digos seleccionados ({', '.join(codigos)}) no tienen datos hist√≥ricos en {nivel_ciiu}."),
                html.Small("Esto puede deberse a:"),
                html.Ul([
                    html.Li("Son actividades nuevas sin hist√≥rico"),
                    html.Li("No tienen empleo registrado significativo"),
                    html.Li("Est√°n agrupados en otras categor√≠as")
                ])
            ], className="alert alert-warning")
            return fig_vacio, fig_vacio, mensaje
        df = df_filtrado
    elif top_n and 'show' in top_n:
        # Tomar top 10 por √∫ltimo per√≠odo
        ultimo_periodo = df['Per√≠odo'].max()
        df_ultimo = df[df['Per√≠odo'] == ultimo_periodo].nlargest(10, 'Empleo')
        sectores_top = df_ultimo['Sector'].tolist()
        df = df[df['Sector'].isin(sectores_top)]
    
    # Verificar que hay datos despu√©s del filtrado
    if df.empty:
        fig_vacio = go.Figure()
        fig_vacio.add_annotation(
            text="No hay datos para mostrar con los filtros seleccionados",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False,
            font=dict(size=14, color="gray")
        )
        return fig_vacio, fig_vacio, html.Div(
            "No hay datos con los par√°metros seleccionados", 
            className="alert alert-info"
        )
    
    # Gr√°fico de barras del √∫ltimo per√≠odo
    ultimo_periodo = df['Per√≠odo'].max()
    df_ultimo = df[df['Per√≠odo'] == ultimo_periodo].sort_values('Empleo', ascending=True)
    
    fig_bars = px.bar(
        df_ultimo,
        x='Empleo',
        y='Sector',
        orientation='h',
        title=f'Empleo por sector - {ultimo_periodo}',
        color='Empleo',
        color_continuous_scale='Blues'
    )
    
    # Serie temporal
    fig_ts = go.Figure()
    for sector in df['Sector'].unique()[:10]:  # M√°ximo 10 series
        df_sector = df[df['Sector'] == sector]
        fig_ts.add_trace(go.Scatter(
            x=df_sector['Date'] if 'Date' in df_sector.columns else df_sector['Per√≠odo'],
            y=df_sector['Empleo'],
            mode='lines+markers',
            name=str(sector)
        ))
    
    fig_ts.update_layout(
        title='Evoluci√≥n temporal por sector',
        xaxis_title='Per√≠odo',
        yaxis_title='Empleo',
        hovermode='x unified'
    )
    
    # Obtener descriptores para la tabla
    desc_data = data_dict.get('descriptores_CIIU', [])
    desc_df = pd.DataFrame(desc_data)
    desc_dict = {}
    if not desc_df.empty:
        desc_filtered = desc_df[desc_df['Tabla'] == nivel_ciiu]
        # Convertir ambos a string para asegurar coincidencia
        desc_dict = {}
        for _, row in desc_filtered.iterrows():
            # Manejar c√≥digos num√©ricos y string
            codigo_str = str(row['C√≥digo']).strip()
            # Para C4, C6, C7 los c√≥digos pueden ser num√©ricos, convertir a int y luego a string sin decimales
            try:
                if nivel_ciiu in ['C4', 'C6', 'C7']:
                    codigo_str = str(int(float(codigo_str)))
            except:
                pass
            desc_dict[codigo_str] = row['Descripci√≥n']
    
    # Enriquecer datos con descripciones
    df_ultimo_enriquecido = df_ultimo.copy()
    df_ultimo_enriquecido['Descripci√≥n'] = df_ultimo_enriquecido['Sector'].apply(
        lambda x: (lambda desc: desc[:50] + '...' if len(desc) > 50 else desc)(
            desc_dict.get(str(x).strip(), desc_dict.get(str(int(float(x))) if str(x).replace('.','').isdigit() else x, 'Sin descripci√≥n disponible'))
        )
    )
    
    # Tabla resumen
    tabla_container = html.Div([
        html.H5(f"Detalle {nivel_ciiu} - {ultimo_periodo}", className="mb-3"),
        html.Small(f"Mostrando {len(df_ultimo)} sectores", className="text-muted mb-2 d-block"),
        dash_table.DataTable(
            data=df_ultimo_enriquecido.to_dict('records'),
            columns=[
                {'name': 'C√≥digo', 'id': 'Sector'},
                {'name': 'Descripci√≥n', 'id': 'Descripci√≥n'},
                {'name': 'Empleo', 'id': 'Empleo', 'type': 'numeric', 'format': {'specifier': ',.0f'}}
            ],
            style_cell={'textAlign': 'left'},
            style_data_conditional=[
                {
                    'if': {'row_index': 0},
                    'backgroundColor': COLORS['success'],
                    'color': 'white',
                }
            ],
            sort_action="native",
            page_size=15
        ),
        html.Div([
            html.Hr(),
            html.Small([
                html.Strong("Nota: "),
                "Algunos c√≥digos CIIU pueden no tener datos hist√≥ricos disponibles. ",
                "Esto es normal para actividades econ√≥micas nuevas, de baja representatividad, ",
                "o que est√°n agrupadas en categor√≠as m√°s generales."
            ], className="text-muted")
        ], className="mt-3")
    ])
    
    return fig_bars, fig_ts, tabla_container

# Callback para gr√°ficos de tama√±o (C5)
@app.callback(
    [Output('stack-c5', 'figure'),
     Output('ts-c5', 'figure'),
     Output('tbl-c5-container', 'children')],
    [Input('dd-sector-c5', 'value'),
     Input('check-tama√±o-c5', 'value'),
     Input('store-data', 'data')]
)
def update_tama√±o_charts(sector, tama√±os, data_dict):
    """Actualiza los gr√°ficos de an√°lisis por tama√±o."""
    if not data_dict or not sector or not tama√±os:
        return go.Figure(), go.Figure(), html.Div()
    
    # Obtener datos C5
    df = pd.DataFrame(data_dict.get('C5', []))
    if df.empty:
        return go.Figure(), go.Figure(), html.Div()
    
    # Procesar per√≠odos
    if 'Per√≠odo' in df.columns:
        df = process_periods(df)
    
    # Filtrar por sector y tama√±os
    sector_ids = [f"{sector}_{t}" for t in tama√±os]
    sector_ids.append(sector)  # Incluir total del sector
    df_filtered = df[df['Sector'].isin(sector_ids)]
    
    # Preparar datos para gr√°fico apilado
    df_pivot = df_filtered.pivot_table(
        index='Per√≠odo',
        columns='Sector',
        values='Empleo',
        aggfunc='sum'
    )
    
    # Gr√°fico de √°rea apilada
    fig_stack = go.Figure()
    for col in df_pivot.columns:
        if col != sector:  # No incluir el total
            fig_stack.add_trace(go.Scatter(
                x=df_pivot.index,
                y=df_pivot[col],
                mode='lines',
                stackgroup='one',
                name=str(col.split('_')[1] if '_' in col else col)
            ))
    
    fig_stack.update_layout(
        title=f'Composici√≥n por tama√±o - {sector}',
        xaxis_title='Per√≠odo',
        yaxis_title='Empleo',
        hovermode='x unified'
    )
    
    # Serie temporal por tama√±o
    fig_ts = go.Figure()
    for tama√±o in tama√±os:
        sector_id = f"{sector}_{tama√±o}"
        df_tama√±o = df_filtered[df_filtered['Sector'] == sector_id]
        if not df_tama√±o.empty:
            fig_ts.add_trace(go.Scatter(
                x=df_tama√±o['Date'] if 'Date' in df_tama√±o.columns else df_tama√±o['Per√≠odo'],
                y=df_tama√±o['Empleo'],
                mode='lines+markers',
                name=str(tama√±o)
            ))
    
    fig_ts.update_layout(
        title=f'Evoluci√≥n por tama√±o - {sector}',
        xaxis_title='Per√≠odo',
        yaxis_title='Empleo',
        hovermode='x unified'
    )
    
    # Tabla resumen
    ultimo_periodo = df_filtered['Per√≠odo'].max()
    df_tabla = df_filtered[df_filtered['Per√≠odo'] == ultimo_periodo][['Sector', 'Empleo']]
    
    tabla = dash_table.DataTable(
        data=df_tabla.to_dict('records'),
        columns=[
            {'name': 'Categor√≠a', 'id': 'Sector'},
            {'name': 'Empleo', 'id': 'Empleo', 'type': 'numeric', 'format': {'specifier': ',.0f'}}
        ],
        style_cell={'textAlign': 'left'},
        page_size=10
    )
    
    return fig_stack, fig_ts, tabla

# Callback para comparaciones
@app.callback(
    Output('div-comparacion-results', 'children'),
    [Input('dd-periodo-a', 'value'),
     Input('dd-periodo-b', 'value'),
     Input('rb-tipo-comparacion', 'value'),
     Input('store-data', 'data')]
)
def update_comparaciones(periodo_a, periodo_b, tipo, data_dict):
    """Actualiza los resultados de comparaci√≥n entre per√≠odos."""
    if not data_dict or not periodo_a or not periodo_b:
        return html.Div("Seleccione dos per√≠odos para comparar", className="alert alert-info")
    
    # Obtener datos C3 para comparaci√≥n sectorial
    df = pd.DataFrame(data_dict.get('C3', []))
    if df.empty:
        return html.Div("No hay datos disponibles", className="alert alert-warning")
    
    # Filtrar por per√≠odos
    df_a = df[df['Per√≠odo'] == periodo_a]
    df_b = df[df['Per√≠odo'] == periodo_b]
    
    if df_a.empty or df_b.empty:
        return html.Div("Uno de los per√≠odos no tiene datos", className="alert alert-warning")
    
    # Hacer merge
    df_comp = pd.merge(
        df_a[['Sector', 'Empleo']],
        df_b[['Sector', 'Empleo']],
        on='Sector',
        suffixes=('_A', '_B')
    )
    
    # Calcular diferencias
    if tipo == 'abs':
        df_comp['Diferencia'] = df_comp['Empleo_A'] - df_comp['Empleo_B']
        title = 'Diferencia absoluta'
    elif tipo == 'pct':
        df_comp['Diferencia'] = ((df_comp['Empleo_A'] - df_comp['Empleo_B']) / df_comp['Empleo_B']) * 100
        title = 'Diferencia porcentual'
    else:  # ratio
        df_comp['Diferencia'] = df_comp['Empleo_A'] / df_comp['Empleo_B']
        title = 'Ratio A/B'
    
    # Gr√°fico de comparaci√≥n
    fig = px.bar(
        df_comp.sort_values('Diferencia'),
        x='Diferencia',
        y='Sector',
        orientation='h',
        title=f'{title}: {periodo_a} vs {periodo_b}',
        color='Diferencia',
        color_continuous_scale='RdBu_r',
        color_continuous_midpoint=0
    )
    
    # Tabla resumen
    tabla = dash_table.DataTable(
        data=df_comp.to_dict('records'),
        columns=[
            {'name': 'Sector', 'id': 'Sector'},
            {'name': periodo_a, 'id': 'Empleo_A', 'type': 'numeric', 'format': {'specifier': ',.0f'}},
            {'name': periodo_b, 'id': 'Empleo_B', 'type': 'numeric', 'format': {'specifier': ',.0f'}},
            {'name': title, 'id': 'Diferencia', 'type': 'numeric', 
             'format': {'specifier': ',.2f' if tipo == 'pct' else ',.0f'}}
        ],
        style_cell={'textAlign': 'left'},
        style_data_conditional=[
            {
                'if': {
                    'filter_query': '{Diferencia} > 0',
                    'column_id': 'Diferencia'
                },
                'backgroundColor': COLORS['success'],
                'color': 'white',
            },
            {
                'if': {
                    'filter_query': '{Diferencia} < 0',
                    'column_id': 'Diferencia'
                },
                'backgroundColor': COLORS['danger'],
                'color': 'white',
            }
        ],
        page_size=15
    )
    
    return html.Div([
        dcc.Graph(figure=fig),
        html.Hr(),
        html.H5("Tabla de comparaci√≥n"),
        tabla
    ])

# Callback para alertas
@app.callback(
    [Output('div-alertas-results', 'children'),
     Output('div-periodo-alertas', 'children')],
    [Input('btn-run-alertas', 'n_clicks'),
     Input('store-alertas-init', 'data'),
     Input('check-auto-alertas', 'value'),
     Input('input-umbral-trim', 'value'),
     Input('input-umbral-yoy', 'value'),
     Input('store-data', 'data'),
     Input('dd-fecha-desde', 'value'),
     Input('dd-fecha-hasta', 'value')]
)
def run_alertas(n_clicks, init_data, auto_alertas, umbral_trim, umbral_yoy, data_dict, fecha_desde, fecha_hasta):
    """Ejecuta el an√°lisis de alertas y anomal√≠as."""
    # Ejecutar autom√°ticamente si est√° activado o si se presiona el bot√≥n
    if not data_dict:
        return html.Div("Cargando datos...", className="alert alert-info"), ""
    
    if not auto_alertas and not n_clicks:
        return (html.Div("Active las alertas autom√°ticas o presione 'Actualizar an√°lisis'", 
                       className="alert alert-info"), "")
    
    alertas = []
    
    # Cargar descriptores para obtener nombres de sectores
    descriptores = pd.DataFrame(data_dict.get('descriptores_CIIU', []))
    sector_desc = {}
    if not descriptores.empty:
        desc_c3 = descriptores[descriptores['Tabla'] == 'C3']
        sector_desc = dict(zip(desc_c3['C√≥digo'], desc_c3['Descripci√≥n']))
    
    # Analizar C1.1 para alertas generales
    df = pd.DataFrame(data_dict.get('C1.1', []))
    if not df.empty:
        df = process_periods(df)
        df = calculate_variations(df)
        
        # Aplicar filtro de fechas si est√°n especificadas
        if fecha_desde and fecha_hasta:
            fecha_desde_ts = parse_period_string(fecha_desde)
            fecha_hasta_ts = parse_period_string(fecha_hasta)
            if fecha_desde_ts and fecha_hasta_ts:
                df = df[(df['Date'] >= fecha_desde_ts) & (df['Date'] <= fecha_hasta_ts)]
        
        # An√°lisis del per√≠odo seleccionado (√∫ltimo del rango o √∫ltimo disponible)
        if len(df) > 0:
            ultimo = df.iloc[-1]
            penultimo = df.iloc[-2] if len(df) > 1 else None
            
            # Informaci√≥n del per√≠odo analizado
            periodo_info = f"Analizando: {ultimo['Per√≠odo']}" if 'Per√≠odo' in ultimo else "Per√≠odo actual"
            
            # ALERTAS CR√çTICAS (Rojas)
            if 'var_trim' in ultimo and pd.notna(ultimo['var_trim']):
                if ultimo['var_trim'] < -5:
                    alertas.append({
                        'tipo': 'danger',
                        'titulo': 'üî¥ ALERTA CR√çTICA: Ca√≠da trimestral severa',
                        'mensaje': f"Ca√≠da del empleo de {ultimo['var_trim']:.2f}% en {ultimo['Per√≠odo']}",
                        'prioridad': 1
                    })
            
            if 'var_yoy' in ultimo and pd.notna(ultimo['var_yoy']):
                if ultimo['var_yoy'] < -10:
                    alertas.append({
                        'tipo': 'danger',
                        'titulo': 'üî¥ ALERTA CR√çTICA: Ca√≠da interanual severa',
                        'mensaje': f"Ca√≠da interanual del empleo de {ultimo['var_yoy']:.2f}% en {ultimo['Per√≠odo']}",
                        'prioridad': 1
                    })
            
            # P√©rdida absoluta de empleos
            if penultimo is not None and 'Empleo' in ultimo and 'Empleo' in penultimo:
                perdida = ultimo['Empleo'] - penultimo['Empleo']
                if perdida < -50000:
                    alertas.append({
                        'tipo': 'danger',
                        'titulo': 'üî¥ ALERTA CR√çTICA: P√©rdida masiva de empleos',
                        'mensaje': f"P√©rdida de {abs(perdida):,.0f} empleos en {ultimo['Per√≠odo']}",
                        'prioridad': 1
                    })
            
            # ALERTAS DE ADVERTENCIA (Amarillas)
            if 'var_trim' in ultimo and pd.notna(ultimo['var_trim']):
                if 3 <= abs(ultimo['var_trim']) <= 5:
                    alertas.append({
                        'tipo': 'warning',
                        'titulo': 'üü° Advertencia: Variaci√≥n trimestral significativa',
                        'mensaje': f"Variaci√≥n de {ultimo['var_trim']:.2f}% en {ultimo['Per√≠odo']}",
                        'prioridad': 2
                    })
            
            if 'var_yoy' in ultimo and pd.notna(ultimo['var_yoy']):
                if 5 <= abs(ultimo['var_yoy']) <= 10:
                    alertas.append({
                        'tipo': 'warning',
                        'titulo': 'üü° Advertencia: Variaci√≥n interanual notable',
                        'mensaje': f"Variaci√≥n interanual de {ultimo['var_yoy']:.2f}% en {ultimo['Per√≠odo']}",
                        'prioridad': 2
                    })
            
            # Cambio de tendencia
            if penultimo is not None and 'var_trim' in ultimo and 'var_trim' in penultimo:
                if pd.notna(ultimo['var_trim']) and pd.notna(penultimo['var_trim']):
                    if (ultimo['var_trim'] > 0 and penultimo['var_trim'] < 0) or \
                       (ultimo['var_trim'] < 0 and penultimo['var_trim'] > 0):
                        alertas.append({
                            'tipo': 'warning',
                            'titulo': 'üü° Advertencia: Cambio de tendencia',
                            'mensaje': f"La tendencia cambi√≥ de {penultimo['var_trim']:.1f}% a {ultimo['var_trim']:.1f}%",
                            'prioridad': 2
                        })
            
            # ALERTAS POSITIVAS (Verdes)
            if 'var_trim' in ultimo and pd.notna(ultimo['var_trim']):
                if ultimo['var_trim'] > 3:
                    alertas.append({
                        'tipo': 'success',
                        'titulo': 'üü¢ Crecimiento trimestral robusto',
                        'mensaje': f"Crecimiento del empleo de {ultimo['var_trim']:.2f}% en {ultimo['Per√≠odo']}",
                        'prioridad': 3
                    })
            
            if 'var_yoy' in ultimo and pd.notna(ultimo['var_yoy']):
                if ultimo['var_yoy'] > 5:
                    alertas.append({
                        'tipo': 'success',
                        'titulo': 'üü¢ Crecimiento interanual s√≥lido',
                        'mensaje': f"Crecimiento interanual de {ultimo['var_yoy']:.2f}% en {ultimo['Per√≠odo']}",
                        'prioridad': 3
                    })
            
            # Creaci√≥n de empleos
            if penultimo is not None and 'Empleo' in ultimo and 'Empleo' in penultimo:
                creacion = ultimo['Empleo'] - penultimo['Empleo']
                if creacion > 30000:
                    alertas.append({
                        'tipo': 'success',
                        'titulo': 'üü¢ Creaci√≥n significativa de empleos',
                        'mensaje': f"Creaci√≥n de {creacion:,.0f} nuevos empleos en {ultimo['Per√≠odo']}",
                        'prioridad': 3
                    })
            
            # ALERTAS INFORMATIVAS (Azules)
            # Verificar m√°ximo hist√≥rico
            if 'Empleo' in df.columns:
                if ultimo['Empleo'] == df['Empleo'].max():
                    alertas.append({
                        'tipo': 'info',
                        'titulo': 'üîµ Nuevo m√°ximo hist√≥rico',
                        'mensaje': f"El empleo alcanz√≥ un m√°ximo hist√≥rico: {ultimo['Empleo']:,.0f} trabajadores",
                        'prioridad': 4
                    })
    
    # Analizar C3 para alertas sectoriales
    df_c3 = pd.DataFrame(data_dict.get('C3', []))
    if not df_c3.empty:
        df_c3 = process_periods(df_c3)
        
        # Aplicar filtro de fechas si est√°n especificadas
        if fecha_desde and fecha_hasta:
            fecha_desde_ts = parse_period_string(fecha_desde)
            fecha_hasta_ts = parse_period_string(fecha_hasta)
            if fecha_desde_ts and fecha_hasta_ts:
                df_c3 = df_c3[(df_c3['Date'] >= fecha_desde_ts) & (df_c3['Date'] <= fecha_hasta_ts)]
        
        # Verificar que hay datos despu√©s del filtro
        if df_c3.empty:
            return (html.Div("No hay datos en el per√≠odo seleccionado", className="alert alert-warning"), 
                   periodo_texto if 'periodo_texto' in locals() else "")
        
        # Obtener √∫ltimo per√≠odo disponible en el rango filtrado
        ultimo_periodo = df_c3['Date'].max()
        penultimo_periodo = df_c3[df_c3['Date'] < ultimo_periodo]['Date'].max() if len(df_c3['Date'].unique()) > 1 else None
        mismo_periodo_anio_anterior = ultimo_periodo - pd.DateOffset(years=1)
        
        # Calcular variaciones por sector
        sectores_criticos = []
        for sector in df_c3['Sector'].unique():
            df_sector = df_c3[df_c3['Sector'] == sector].sort_values('Date')
            
            if len(df_sector) > 1:
                # Variaci√≥n trimestral
                ultimo_val = df_sector[df_sector['Date'] == ultimo_periodo]['Empleo'].values
                penultimo_val = df_sector[df_sector['Date'] == penultimo_periodo]['Empleo'].values if penultimo_periodo is not None else []
                
                if len(ultimo_val) > 0 and len(penultimo_val) > 0:
                    var_trim = ((ultimo_val[0] - penultimo_val[0]) / penultimo_val[0]) * 100
                    
                    # Obtener descripci√≥n del sector
                    desc_sector = sector_desc.get(sector, f"Sector {sector}")
                    
                    # Variaci√≥n interanual
                    anio_anterior_val = df_sector[df_sector['Date'] == mismo_periodo_anio_anterior]['Empleo'].values
                    var_yoy = None
                    if len(anio_anterior_val) > 0:
                        var_yoy = ((ultimo_val[0] - anio_anterior_val[0]) / anio_anterior_val[0]) * 100
                    
                    # Obtener el per√≠odo actual para mostrar en las alertas
                    periodo_actual = df_sector[df_sector['Date'] == ultimo_periodo]['Per√≠odo'].values
                    periodo_str = periodo_actual[0] if len(periodo_actual) > 0 else "Per√≠odo actual"
                    
                    # Alertas sectoriales cr√≠ticas
                    if var_yoy is not None and var_yoy < -15:
                        sectores_criticos.append(desc_sector)
                        alertas.append({
                            'tipo': 'danger',
                            'titulo': f'üî¥ Sector en crisis: {sector}',
                            'mensaje': f"{desc_sector}: Ca√≠da interanual de {var_yoy:.1f}% en {periodo_str}",
                            'prioridad': 1
                        })
                    elif abs(var_trim) > umbral_trim:
                        # Solo alertar si la variaci√≥n es significativa y no es un error de datos
                        if pd.notna(var_trim) and ultimo_val[0] > 0 and penultimo_val[0] > 0:
                            tipo = 'warning' if var_trim < 0 else 'info'
                            simbolo = 'üìâ' if var_trim < 0 else 'üìà'
                            alertas.append({
                                'tipo': tipo,
                                'titulo': f'{simbolo} {sector}: {desc_sector[:30]}...' if len(desc_sector) > 30 else f'{simbolo} {sector}: {desc_sector}',
                                'mensaje': f"Variaci√≥n trimestral de {var_trim:.2f}% en {periodo_str}",
                                'prioridad': 3 if var_trim > 0 else 2
                            })
        
        # Alerta consolidada si hay m√∫ltiples sectores en crisis
        if len(sectores_criticos) > 3:
            alertas.append({
                'tipo': 'danger',
                'titulo': 'üî¥ ALERTA: Crisis sectorial generalizada',
                'mensaje': f"{len(sectores_criticos)} sectores con ca√≠das superiores al 15% interanual",
                'prioridad': 1
            })
    
    # Ordenar alertas por prioridad
    alertas.sort(key=lambda x: x.get('prioridad', 5))
    
    # Preparar informaci√≥n del per√≠odo
    if fecha_desde and fecha_hasta:
        periodo_texto = html.Div([
            html.Strong("üìÖ Per√≠odo analizado: "),
            f"{fecha_desde} hasta {fecha_hasta}",
            html.Br(),
            html.Small(f"√öltimo per√≠odo con datos: {periodo_info if 'periodo_info' in locals() else 'N/D'}", 
                      className="text-muted")
        ])
    else:
        periodo_texto = html.Div([
            html.Strong("üìÖ Analizando todos los per√≠odos disponibles"),
            html.Br(),
            html.Small(f"√öltimo per√≠odo: {periodo_info if 'periodo_info' in locals() else 'N/D'}", 
                      className="text-muted")
        ])
    
    # Renderizar alertas
    if not alertas:
        return (html.Div([
            html.H4("‚úÖ Estado del Sistema", className="text-success mb-3"),
            html.P("No se detectaron alertas significativas con los umbrales configurados."),
            html.P(f"Umbrales actuales: Trimestral {umbral_trim}% | Interanual {umbral_yoy}%", 
                  className="text-muted small")
        ], className="alert alert-success"), periodo_texto)
    
    # Agrupar alertas por tipo
    alertas_por_tipo = {
        'danger': [],
        'warning': [],
        'success': [],
        'info': []
    }
    
    for alerta in alertas:
        tipo = alerta.get('tipo', 'info')
        if tipo in alertas_por_tipo:
            alertas_por_tipo[tipo].append(alerta)
    
    # Construir la visualizaci√≥n
    cards = []
    
    # Resumen general
    n_criticas = len(alertas_por_tipo['danger'])
    n_advertencias = len(alertas_por_tipo['warning'])
    n_positivas = len(alertas_por_tipo['success'])
    n_info = len(alertas_por_tipo['info'])
    
    resumen = html.Div([
        html.H4("üìä Resumen de Alertas", className="mb-3"),
        html.Div([
            html.Span(f"üî¥ Cr√≠ticas: {n_criticas}", className="badge bg-danger me-2"),
            html.Span(f"üü° Advertencias: {n_advertencias}", className="badge bg-warning text-dark me-2"),
            html.Span(f"üü¢ Positivas: {n_positivas}", className="badge bg-success me-2"),
            html.Span(f"üîµ Informativas: {n_info}", className="badge bg-info me-2"),
        ], className="mb-3")
    ], className="alert alert-light border mb-4")
    
    cards.append(resumen)
    
    # Mostrar alertas por categor√≠a (m√°ximo 15 alertas en total)
    contador = 0
    max_alertas = 15
    
    for tipo in ['danger', 'warning', 'success', 'info']:
        if contador >= max_alertas:
            break
            
        for alerta in alertas_por_tipo[tipo]:
            if contador >= max_alertas:
                break
                
            cards.append(
                html.Div([
                    html.H6(alerta['titulo'], className="mb-2 fw-bold"),
                    html.P(alerta['mensaje'], className="mb-0")
                ], className=f"alert alert-{tipo} mb-2")
            )
            contador += 1
    
    # Agregar nota si hay m√°s alertas
    if len(alertas) > max_alertas:
        cards.append(
            html.Div(
                f"... y {len(alertas) - max_alertas} alertas adicionales",
                className="text-muted text-center mt-2"
            )
        )
    
    return html.Div(cards), periodo_texto

# Callback para tabla de datos crudos
@app.callback(
    Output('div-raw-table', 'children'),
    [Input('dd-dataset-raw', 'value'),
     Input('store-data', 'data')]
)
def update_raw_table(dataset, data_dict):
    """Actualiza la tabla de datos crudos."""
    if not data_dict or not dataset:
        return html.Div("Seleccione un dataset", className="alert alert-info")
    
    df = pd.DataFrame(data_dict.get(dataset, []))
    if df.empty:
        return html.Div("No hay datos disponibles", className="alert alert-warning")
    
    # Limitar a 1000 filas para performance
    if len(df) > 1000:
        df = df.head(1000)
        mensaje = f"Mostrando primeras 1000 filas de {len(data_dict.get(dataset, []))} totales"
    else:
        mensaje = f"Mostrando {len(df)} filas"
    
    # Crear tabla
    columns = []
    for col in df.columns:
        col_config = {'name': col, 'id': col}
        if df[col].dtype in ['float64', 'int64']:
            col_config['type'] = 'numeric'
            col_config['format'] = {'specifier': ',.0f'}
        columns.append(col_config)
    
    tabla = dash_table.DataTable(
        data=df.to_dict('records'),
        columns=columns,
        style_cell={'textAlign': 'left'},
        filter_action="native",
        sort_action="native",
        page_action="native",
        page_current=0,
        page_size=20,
        export_format="csv"
    )
    
    return html.Div([
        html.P(mensaje, className="text-muted"),
        tabla
    ])

# =====================================================================
# EJECUCI√ìN
# =====================================================================

# Configurar el servidor para producci√≥n
server = app.server

if __name__ == '__main__':
    logger.info("Iniciando Dashboard V1...")
    logger.info(f"Directorio de datos: {DATA_DIR}")
    
    # Verificar que existan los archivos necesarios
    required_files = ['C1.1.csv', 'C1.2.csv', 'descriptores_CIIU.csv']
    missing_files = []
    
    for file in required_files:
        file_path = os.path.join(DATA_DIR, file)
        if not os.path.exists(file_path):
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"Archivos faltantes: {missing_files}")
        logger.error("Ejecute preprocesamiento.py primero")
    else:
        logger.info("Todos los archivos requeridos encontrados")
        # Detectar si estamos en producci√≥n o desarrollo
        import sys
        # Por defecto en modo debug para desarrollo local
        debug_mode = True
        # Solo desactivar debug si expl√≠citamente se pide producci√≥n
        if '--production' in sys.argv:
            debug_mode = False
        
        port = int(os.environ.get('PORT', 8050))
        host = '127.0.0.1' if debug_mode else '0.0.0.0'
        
        logger.info(f"Dashboard disponible en: http://{host}:{port}")
        app.run(debug=debug_mode, host=host, port=port)